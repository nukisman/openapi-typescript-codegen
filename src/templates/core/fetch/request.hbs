{{>header}}

import { ApiError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import { CancelablePromise } from './CancelablePromise';
import type { OnCancel } from './CancelablePromise';
import type { OpenAPIConfig } from './OpenAPI';
{{#if @root.exportClient}}
import { BaseHttpRequest } from './BaseHttpRequest';
{{else}}
import { OpenAPI } from './OpenAPI';
{{/if}}

{{>functions/isDefined}}


{{>functions/isString}}


{{>functions/isStringWithValue}}


{{>functions/isBlob}}


{{>functions/base64}}


{{>functions/getQueryString}}


{{>functions/getUrl}}


{{>functions/getFormData}}


{{>functions/resolve}}


{{>fetch/getHeaders}}


{{>fetch/getRequestBody}}


{{>fetch/sendRequest}}


{{>fetch/getResponseHeader}}


{{>fetch/getResponseBody}}


{{>functions/catchErrors}}


{{#if @root.exportClient}}
export class FetchHttpRequest extends BaseHttpRequest {
    constructor(openApiConfig: OpenAPIConfig) {
        super(openApiConfig);
    }

    /**
    * Request using fetch client
    * @param options The request options from the the service
    * @returns CancelablePromise<T>
    * @throws ApiError
    */
    request<T>(options: ApiRequestOptions): CancelablePromise<T> {
        return new CancelablePromise(async (resolve, reject, onCancel) => {
            try {
                const url = getUrl(options, this.openApiConfig);
                const formData = getFormData(options);
                const body = getRequestBody(options);
                const headers = await getHeaders(options, this.openApiConfig);

                if (!onCancel.isCancelled) {
                    const response = await sendRequest(options, this.openApiConfig, url, formData, body, headers, onCancel);
                    const responseBody = await getResponseBody(response);
                    const responseHeader = getResponseHeader(response, options.responseHeader);

                    const result: ApiResult = {
                        url,
                        ok: response.ok,
                        status: response.status,
                        statusText: response.statusText,
                        body: responseHeader || responseBody,
                    };

                    catchErrors(options, result);

                    resolve(result.body);
                }
            } catch (error) {
                reject(error);
            }
        });
    }
}
{{else}}
/**
 * Request using fetch client
 * @param options The request options from the the service
 * @returns CancelablePromise<T>
 * @throws ApiError
 */
export function request<T>(options: ApiRequestOptions): CancelablePromise<T> {
    return new CancelablePromise(async (resolve, reject, onCancel) => {
        try {
            const url = getUrl(options, OpenAPI);
            const formData = getFormData(options);
            const body = getRequestBody(options);
            const headers = await getHeaders(options, OpenAPI);

            if (!onCancel.isCancelled) {
                const response = await sendRequest(options, OpenAPI, url, formData, body, headers, onCancel);
                const responseBody = await getResponseBody(response);
                const responseHeader = getResponseHeader(response, options.responseHeader);

                const result: ApiResult = {
                    url,
                    ok: response.ok,
                    status: response.status,
                    statusText: response.statusText,
                    body: responseHeader || responseBody,
                };

                catchErrors(options, result);

                resolve(result.body);
            }
        } catch (error) {
            reject(error);
        }
    });
}
{{/if}}
