{{>header}}

import FormData from 'form-data';
import fetch, { BodyInit, Headers, RequestInit, Response } from 'node-fetch';
import { types } from 'util';

import { ApiError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import type { ClientConfig } from './OpenAPI';
{{#if @root.exportClient}}
import type { BaseHttpRequest } from './BaseHttpRequest';
{{else}}
import { OpenAPI } from './OpenAPI';
{{/if}}

{{>functions/isDefined}}


{{>functions/isString}}


{{>functions/deepAssign}}


{{>functions/isStringWithValue}}


{{>functions/isBinary}}


{{>functions/getQueryString}}


{{>functions/getUrl}}


{{>functions/isFormData}}


{{>functions/getFormData}}


{{>functions/resolve}}


{{>functions/filterHeaders}}


{{>node/getHeaders}}


{{>node/getRequestBody}}


{{>node/sendRequest}}


{{>node/getResponseHeader}}


{{>node/getResponseBody}}


{{>functions/catchErrors}}


{{#if @root.exportClient}}
export class NodeHttpRequest implements BaseHttpRequest {
    /**
    * Request using node-fetch client
    * @param options The request options from the the service
    * @param config The OpenAPI configuration
    * @param [mergeConfig] Additional optional OpenAPI configuration that will be merged with the first one
    * @returns ApiResult
    * @throws ApiError
    */
    async request(options: ApiRequestOptions, config: ClientConfig, mergeConfig?: ClientConfig): Promise<ApiResult> {
        const conf = mergeConfig ? deepAssign(config, mergeConfig) : config;
        const url = getUrl(options, conf);
        const response = await sendRequest(options, conf, url);
        const responseBody = await getResponseBody(response);
        const responseHeader = getResponseHeader(response, options.responseHeader);

        const result: ApiResult = {
            url,
            ok: response.ok,
            status: response.status,
            statusText: response.statusText,
            body: responseHeader || responseBody,
        };

        catchErrors(options, result);
        return result;
    }
}
{{else}}
/**
 * Request using node-fetch client
 * @param options The request options from the the service
 * @returns ApiResult
 * @throws ApiError
 */
export async function request(options: ApiRequestOptions): Promise<ApiResult> {
    const url = getUrl(options, OpenAPI);
    const response = await sendRequest(options, OpenAPI, url);
    const responseBody = await getResponseBody(response);
    const responseHeader = getResponseHeader(response, options.responseHeader);

    const result: ApiResult = {
        url,
        ok: response.ok,
        status: response.status,
        statusText: response.statusText,
        body: responseHeader || responseBody,
    };

    catchErrors(options, result);
    return result;
}
{{/if}}
